/***************************************************************************
                          Codesource Platform
                         ---------------------
    begin                : Mon Sep 18 2006
    copyright            : Giuseppe "denever" Martino
    email                : denever@users.berlios.de
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *  This program is distributed in the hope that it will be useful,        *
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of         *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the          *
 *  GNU General Public License for more details.                           *
 *                                                                         *
 *  You should have received a copy of the GNU General Public License      *
 *  along with this program; if not, write to the Free Software            *
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,             *
 *  MA 02110-1301 USA                                                      *
 *                                                                         *
 ***************************************************************************/
package serveragent.sql;

import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;

import content.ResultContent;
import content.SearchContent;
import content.SnipContent;

public class db_interface
{
	Connection m_db_con = null;

	public db_interface(String filename)
	{
		try
		{
			Class.forName("org.hsqldb.jdbcDriver").newInstance();
			m_db_con = DriverManager.getConnection("jdbc:hsqldb:file:"
					+ filename, "sa", "");
		} catch (Exception ex)
		{
			ex.printStackTrace();
		}

		if (!existdb())
			CreateDb();
	}

	protected void finalize()
	{
	}

	public void shutdown()
	{
		try
		{
			Statement stmt = m_db_con.createStatement();
			stmt.execute("COMMIT");
			stmt.execute("SHUTDOWN");
		} catch (SQLException ex)
		{
			System.out.println("Fallito lo shutdown");
		}
	}

	public boolean existdb()
	{
		try
		{
			String selectautore = "SELECT Username FROM Autore";
			Statement stmt = m_db_con.createStatement();
			stmt.executeQuery(selectautore);
		} catch (SQLException ex)
		{
			System.out.println("Creazione ServerAgent DB");
			return false;
		}

		return true;
	}

	public void CreateDb()
	{
		try
		{
			String createtable_Snip = "CREATE CACHED TABLE Snip( ";
			createtable_Snip += "SnipName VARCHAR(30) NOT NULL PRIMARY KEY,";
			createtable_Snip += "Author VARCHAR(8),";
			createtable_Snip += "Registrazione DATE,";
			createtable_Snip += "Modifica DATE,";
			createtable_Snip += "Descrizione LONGVARCHAR NOT NULL,";
			createtable_Snip += "Rating TINYINT DEFAULT 0)";

			String createtable_Autore = "CREATE CACHED TABLE Autore( ";
			createtable_Autore += "Username VARCHAR(8) NOT NULL PRIMARY KEY,";
			createtable_Autore += "Password CHAR(32) NOT NULL,";
			createtable_Autore += "JadeId VARCHAR(30) NOT NULL,";
			createtable_Autore += "Nome VARCHAR(30) NOT NULL,";
			createtable_Autore += "Cognome VARCHAR(30) NOT NULL,";
			createtable_Autore += "Email VARCHAR(50) NOT NULL,";
			createtable_Autore += "HomePage VARCHAR(50) NOT NULL,";
			createtable_Autore += "Online BOOLEAN DEFAULT False)";

			String createtable_Libreria = "CREATE CACHED TABLE Libreria( ";
			createtable_Libreria += "Id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,";
			createtable_Libreria += "Nome VARCHAR(30) NOT NULL,";
			createtable_Libreria += "Descrizione LONGVARCHAR NOT NULL,";
			createtable_Libreria += "Versione VARCHAR(8) NOT NULL)";

			String createtable_Possiede = "CREATE CACHED TABLE Possiede( ";
			createtable_Possiede += "Id_utente VARCHAR(8) NOT NULL,";
			createtable_Possiede += "Id_snip VARCHAR(30) NOT NULL)";

			String createtable_Dipende = "CREATE CACHED TABLE Dipende( ";
			createtable_Dipende += "Id_snip VARCHAR(30) NOT NULL,";
			createtable_Dipende += "Id_libreria INTEGER NOT NULL)";

			Statement stmt1 = m_db_con.createStatement();
			stmt1.executeUpdate(createtable_Snip);
			stmt1.executeUpdate(createtable_Autore);
			stmt1.executeUpdate(createtable_Libreria);
			stmt1.executeUpdate(createtable_Possiede);
			stmt1.executeUpdate(createtable_Dipende);
			stmt1.close();
		} catch (Exception ex)
		{
			ex.printStackTrace();
		}
	}

	public boolean check_login(String Username, String Password, String jadeid)
	{
		try
		{
			Statement stmt = m_db_con.createStatement();

			ResultSet res = stmt
					.executeQuery("SELECT Password FROM Autore WHERE Username='"
							+ Username + "' AND JadeId='" + jadeid + "'");

			String thePass = "";

			if (res.next())
				thePass = res.getString("Password");

			return Password.equals(thePass);
		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
		}

		return false;
	}

	public boolean is_logged(String Username)
	{
		try
		{
			Statement stmt = m_db_con.createStatement();

			ResultSet res = stmt
					.executeQuery("SELECT Online FROM Autore WHERE Username='"
							+ Username + "'");

			if (res.next())
				return res.getBoolean("Online");

		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
		}
		return false;
	}

	public boolean jadeid_is_logged(String jadeid)
	{
		try
		{
			Statement stmt = m_db_con.createStatement();

			ResultSet res = stmt
					.executeQuery("SELECT Online FROM Autore WHERE JadeId='"
							+ jadeid + "'");

			if (res.next())
				return res.getBoolean("Online");

		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
		}
		return false;
	}

	public boolean register(String Username, String Password, String JadeId,
			String Nome, String Cognome, String Email, String HomePage)
	{
		try
		{
			String insertautore = "INSERT INTO Autore(Username,Password,JadeId,Nome,Cognome,Email,HomePage) ";
			insertautore += "VALUES('";
			insertautore += Username + "','";
			insertautore += Password + "','";
			insertautore += JadeId + "','";
			insertautore += Nome + "','";
			insertautore += Cognome + "','";
			insertautore += Email + "','";
			insertautore += HomePage + "')";

			System.out.println(insertautore);

			Statement stmt = m_db_con.createStatement();
			stmt.executeUpdate(insertautore);
			stmt.execute("COMMIT");
			return true;
		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
			return false;
		}
	}

	public void set_online(String Username)
	{
		try
		{
			String updateonline = "UPDATE Autore SET Online=True WHERE Username='"
					+ Username + "'";
			Statement stmt = m_db_con.createStatement();
			stmt.executeUpdate(updateonline);
			stmt.execute("COMMIT");
		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
		}
	}

	public void set_offline(String Username)
	{
		try
		{
			String updateonline = "UPDATE Autore SET Online=False WHERE Username='"
					+ Username + "'";
			Statement stmt = m_db_con.createStatement();
			stmt.executeUpdate(updateonline);
			stmt.execute("COMMIT");
		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
		}
	}

	public boolean vote(String snipname, String value)
	{
		int vote = Integer.parseInt(value);
		int rating = 0;

		try
		{
			Statement stmt = m_db_con.createStatement();
			String query = "SELECT Rating FROM Snip WHERE SnipName='"
					+ snipname + "'";
			ResultSet res = stmt.executeQuery(query);

			if (res.next())
				rating = res.getInt("Rating");

			int newrating = (rating + vote) / 2;

			String updateonline = "UPDATE Snip SET Rating=";
			updateonline += Integer.toString(newrating);
			updateonline += " WHERE SnipName='" + snipname + "'";

			stmt.executeUpdate(updateonline);
			stmt.execute("COMMIT");
		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
			return false;
		}
		return true;
	}

	public ResultContent search_author(SearchContent sc)
	{
		ResultContent tmp = new ResultContent();
		try
		{
			String fields[] = sc.getFields();

			String query = "SELECT * FROM Autore ";

			if (fields.length != 0)
				query += " WHERE " + fields[0] + " LIKE '"
						+ sc.getFieldValue(fields[0]) + "' ";

			for (int i = 1; i < fields.length; i++)
			{
				query += "AND " + fields[i] + " LIKE '"
						+ sc.getFieldValue(fields[i]) + "' ";
			}

			System.out.println(query);

			Statement stmt = m_db_con.createStatement();
			ResultSet res = stmt.executeQuery(query);

			tmp.newResult();

			while (res.next())
			{
				tmp.addAuthorResult(res.getString("UserName"), res
						.getString("JadeId"), res.getString("nome"), res
						.getString("cognome"), res.getString("email"), res
						.getString("homepage"), res.getString("online"));
			}

		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
		}
		return tmp;
	}

	public boolean exist_username(String author)
	{
		String tmp = "";

		try
		{
			String query = "SELECT Username FROM Autore ";
			query += " WHERE Username='" + author + "'";

			Statement stmt = m_db_con.createStatement();
			ResultSet res = stmt.executeQuery(query);

			if (res.next())
			{
				tmp = res.getString("Username");
			}

		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
		}

		return tmp.equals(author);
	}

	public boolean exist_jadeid(String jadeid)
	{
		String tmp = "";

		try
		{
			String query = "SELECT JadeId FROM Autore ";
			query += " WHERE JadeId='" + jadeid + "'";

			Statement stmt = m_db_con.createStatement();
			ResultSet res = stmt.executeQuery(query);

			if (res.next())
			{
				tmp = res.getString("JadeId");
			}

		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
		}

		return tmp.equals(jadeid);
	}

	public ResultContent search_snip(SearchContent sc)
	{
		ResultContent tmp = new ResultContent();
		try
		{
			String fields[] = sc.getFields();

			String query = "SELECT * FROM Snip JOIN Autore ON Snip.Author=Autore.Username ";

			if (fields.length != 0)
				query += " WHERE " + fields[0] + " LIKE '"
						+ sc.getFieldValue(fields[0]) + "' ";

			for (int i = 1; i < fields.length; i++)
			{
				query += "AND " + fields[i] + " LIKE '"
						+ sc.getFieldValue(fields[i]) + "' ";
			}

			System.out.println(query);

			Statement stmt = m_db_con.createStatement();
			ResultSet res = stmt.executeQuery(query);

			tmp.newResult();

			while (res.next())
			{
				tmp.addSnipResult(res.getString("SnipName"), res
						.getString("Author"), res.getString("Descrizione"), res
						.getString("rating"), res.getString("registrazione"),
						res.getString("modifica"), res.getString("JadeId"));
			}

		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
		}
		return tmp;
	}

	public ResultContent search(SearchContent sc)
	{
		ResultContent tmp = null;

		String table = sc.getTable();

		if (table.equals("Autore"))
			tmp = search_author(sc);

		if (table.equals("Snip"))
			tmp = search_snip(sc);

		return tmp;
	}

	public boolean publicsnip(SnipContent sc)
	{
		try
		{
			Date now = new Date(System.currentTimeMillis());

			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String today = df.format(now);

			String insertsnip = "INSERT INTO Snip(SnipName, Author, Descrizione, Registrazione, Modifica) ";
			insertsnip += "VALUES('";
			insertsnip += sc.getSnipName() + "','";
			insertsnip += sc.getAuthor() + "','";
			insertsnip += sc.getDescription() + "','";
			insertsnip += today + "','";
			insertsnip += today + "')";

			System.out.println(insertsnip);

			String insertpossiede = "INSERT INTO Possiede VALUES('";
			insertpossiede += sc.getAuthor() + "','";
			insertpossiede += sc.getSnipName() + "')";

			Statement stmt1 = m_db_con.createStatement();
			stmt1.executeUpdate(insertsnip);
			stmt1.executeUpdate(insertpossiede);
			stmt1.execute("COMMIT");
			// stmt1.close();
			return true;
		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
			return false;
		}
	}

	public boolean newreleasesnip(SnipContent sc)
	{
		try
		{
			Date now = new Date(System.currentTimeMillis());

			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			String today = df.format(now);

			String insertsnip = "UPDATE Snip SET ";
			insertsnip += "Descrizione='" + sc.getDescription() + "',";
			insertsnip += "Modifica='" + today+"' ";
			insertsnip += "WHERE SnipName='" + sc.getSnipName() + "'";

			System.out.println(insertsnip);

			Statement stmt1 = m_db_con.createStatement();
			stmt1.executeUpdate(insertsnip);
			stmt1.execute("COMMIT");
			stmt1.close();
			return true;
		} catch (SQLException ex)
		{
			System.err.println("SQLException: " + ex.getMessage());
			return false;
		}
	}
}
